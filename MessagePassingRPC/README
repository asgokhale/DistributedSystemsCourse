This directory comprises code to illustrate a simple message passing style of
client-server communication using ZeroMQ's REQ-REP pair. In the message passing
style, the caller is responsible to format the message in a way that it hopes is
understandable by the other side. Upon receiving such a message, the other side
must parse the message, make sense out of it, and then handle it or throw an
error in case an unknown or malformed message shows up.

A remote procedure call (RPC) provides a higher level abstraction to the caller
wherein the caller invokes methods that correspond to an advertised interface
by the server. By virtue of making method calls, the caller is guaranteed that
it cannot send any incorrect or malformed messages to the other side. These
guarantees are provided by a combination of using object-oriented style class
methods and autogenerated serialization code from frameworks like Flatbuffers.

Our interface for this RPC example is something like this:

interface Registry {
    string get (string key);
    void put (string key, string value);
}

We then use the famous Bridge Design Pattern where the server-side provides
the implementation of the interface while the client side invokes methods on
a proxy that supports exactly this interface. The proxy's job is to translate the
OO method call into a packet and send it to the remote side and wait for reply
passing it back to the client logic


In this code, we do not use Flatbuffers as our packet is quite trivial. For complex
packet formats, however, it is important to specify the packet formats in a
style supported by serialization frameworks and let those frameworks generate
the code for us to do the serialization.

Message Passing:
------------------------

Run server as
    python3 mp_server.py [-p <port>]
    where default port is 5557

Run client as
    python3 mp_client.py [-a <server IP>] [-p <server port>]
    where the default server IP is localhost and default port is 5557

Remote Procedure Call:
--------------------------------

Run server as
    python3 rpc_server.py [-p <port>]
    where default port is 5557

Run client as
    python3 rpc_client.py [-a <server IP>] [-p <server port>]
    where the default server IP is localhost and default port is 5557
